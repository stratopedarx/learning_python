# coding: utf-8

"""
После нулевого прохода по массиву "вверху" оказывается самый "легкий" элемент - отсюда аналогия с пузырьком.
Следующий проход делается до второго сверху элемента, таким образом второй по величине элемент поднимается
на правильную позицию...
Алгоритм считается учебным и практически не применяется вне учебной литературы, вместо него на практике
применяются более эффективные алгоритмы сортировки. В то же время метод сортировки обменами лежит в основе
некоторых более совершенных алгоритмов, таких как шейкерная сортировка, пирамидальная сортировка и
быстрая сортировка.

Сложность: O(n^2).
https://www.toptal.com/developers/sorting-algorithms/bubble-sort
"""
from decorator_time import decorator_time


a = [0, 2, 3, -4, 6, 9, 7, 8]
b = [9, 8, 7, 6, 5, 4, 3, 2, 1]
c = [1, 2, 3, 4, 5, 6, 7, 8, 9]


@decorator_time
def bubble_sort(data):
    for i in xrange(1, len(data)):
        for j in list(reversed(range(len(data))))[:-i]:
            if data[j] < data[j - 1]:
                data[j], data[j - 1] = data[j - 1], data[j]

    return data

assert bubble_sort(a) == [-4, 0, 2, 3, 6, 7, 8, 9], 'It\'s failed'
assert bubble_sort(b) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'It\'s failed'
assert bubble_sort(c) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'It\'s failed'
